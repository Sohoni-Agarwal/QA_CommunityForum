"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const common_1 = require("@boost/common");
const internal_1 = require("@boost/internal");
const EXTS = {
    js: ['js'],
    json: ['json', 'json5'],
    yaml: ['yaml', 'yml'],
};
class FileBackend extends common_1.Contract {
    constructor() {
        super(...arguments);
        this.fileCache = {};
        this.type = 'backend';
    }
    init(services, options) {
        this.configure(options);
        // Validate resource paths are directories
        this.options.paths.forEach(resourcePath => {
            if (fs_1.default.existsSync(resourcePath) && !fs_1.default.statSync(resourcePath).isDirectory()) {
                throw new internal_1.RuntimeError('translate', 'TL_INVALID_RES_PATH', [resourcePath]);
            }
        });
    }
    blueprint({ array, string }) {
        return {
            format: string('yaml').oneOf(['js', 'json', 'yaml']),
            paths: array(string()),
        };
    }
    // istanbul ignore next
    create() {
        // We don't need this but is required by the interface
    }
    read(locale, namespace, callback) {
        const { format, paths } = this.options;
        const resources = {};
        paths.forEach(resourcePath => {
            EXTS[format].some(ext => {
                const filePath = path_1.default.normalize(path_1.default.join(resourcePath, locale, `${namespace}.${ext}`));
                if (!this.fileCache[filePath] && !fs_1.default.existsSync(filePath)) {
                    return false;
                }
                Object.assign(resources, this.fileCache[filePath] || (this.fileCache[filePath] = common_1.parseFile(filePath)));
                return true;
            });
        });
        callback(null, resources);
        return resources;
    }
}
exports.default = FileBackend;
