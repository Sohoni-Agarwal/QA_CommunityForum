import { Blueprint, Predicates } from 'optimal';
export declare type Path = string;
export declare type AbstractConstructor<T> = Function & {
    prototype: T;
};
export declare type ConcreteConstructor<T> = new (...args: unknown[]) => T;
export declare type Constructor<T> = AbstractConstructor<T> | ConcreteConstructor<T>;
export interface Optionable<T extends object = {}> {
    readonly options: Required<T>;
    blueprint(predicates: Predicates): Blueprint<T>;
}
//# sourceMappingURL=types.d.ts.map