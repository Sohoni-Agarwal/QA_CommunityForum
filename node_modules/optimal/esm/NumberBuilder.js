function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import Builder from './Builder';

function isNumber(value) {
  return typeof value === 'number';
}

var NumberBuilder = function (_Builder) {
  _inheritsLoose(NumberBuilder, _Builder);

  function NumberBuilder(defaultValue) {
    return _Builder.call(this, 'number', defaultValue || 0) || this;
  }

  var _proto = NumberBuilder.prototype;

  _proto.between = function between(min, max, inclusive) {
    if (inclusive === void 0) {
      inclusive = false;
    }

    if ("production" !== process.env.NODE_ENV) {
      this.invariant(isNumber(min) && isNumber(max), 'Between requires a minimum and maximum number.');
    }

    return this.addCheck(this.checkBetween, min, max, inclusive);
  };

  _proto.checkBetween = function checkBetween(path, value, min, max, inclusive) {
    if (inclusive === void 0) {
      inclusive = false;
    }

    if ("production" !== process.env.NODE_ENV) {
      this.invariant(isNumber(value) && (inclusive ? value >= min && value <= max : value > min && value < max), "Number must be between " + min + " and " + max + (inclusive ? ' inclusive' : '') + ".", path);
    }
  };

  _proto.gt = function gt(min, inclusive) {
    if (inclusive === void 0) {
      inclusive = false;
    }

    if ("production" !== process.env.NODE_ENV) {
      this.invariant(isNumber(min), 'Greater-than requires a minimum number.');
    }

    return this.addCheck(this.checkGreaterThan, min, inclusive);
  };

  _proto.gte = function gte(min) {
    return this.gt(min, true);
  };

  _proto.checkGreaterThan = function checkGreaterThan(path, value, min, inclusive) {
    if (inclusive === void 0) {
      inclusive = false;
    }

    if ("production" !== process.env.NODE_ENV) {
      if (inclusive) {
        this.invariant(isNumber(value) && value >= min, "Number must be greater than or equal to " + min + ".", path);
      } else {
        this.invariant(isNumber(value) && value > min, "Number must be greater than " + min + ".", path);
      }
    }
  };

  _proto.lt = function lt(max, inclusive) {
    if (inclusive === void 0) {
      inclusive = false;
    }

    if ("production" !== process.env.NODE_ENV) {
      this.invariant(isNumber(max), 'Less-than requires a maximum number.');
    }

    return this.addCheck(this.checkLessThan, max, inclusive);
  };

  _proto.lte = function lte(max) {
    return this.lt(max, true);
  };

  _proto.checkLessThan = function checkLessThan(path, value, max, inclusive) {
    if (inclusive === void 0) {
      inclusive = false;
    }

    if ("production" !== process.env.NODE_ENV) {
      if (inclusive) {
        this.invariant(isNumber(value) && value <= max, "Number must be less than or equal to " + max + ".", path);
      } else {
        this.invariant(isNumber(value) && value < max, "Number must be less than " + max + ".", path);
      }
    }
  };

  _proto.oneOf = function oneOf(list) {
    if ("production" !== process.env.NODE_ENV) {
      this.invariant(Array.isArray(list) && list.length > 0 && list.every(function (item) {
        return isNumber(item);
      }), 'One of requires a non-empty array of numbers.');
    }

    this.addCheck(this.checkOneOf, list);
    return this;
  };

  _proto.checkOneOf = function checkOneOf(path, value, list) {
    if ("production" !== process.env.NODE_ENV) {
      this.invariant(list.includes(value), "Number must be one of: " + list.join(', '), path);
    }
  };

  return NumberBuilder;
}(Builder);

export { NumberBuilder as default };
export function number(defaultValue) {
  return new NumberBuilder(defaultValue);
}