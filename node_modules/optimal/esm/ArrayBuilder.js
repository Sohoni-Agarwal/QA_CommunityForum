function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import Builder from './Builder';

var ArrayBuilder = function (_Builder) {
  _inheritsLoose(ArrayBuilder, _Builder);

  function ArrayBuilder(contents, defaultValue) {
    var _this;

    if (contents === void 0) {
      contents = null;
    }

    if (defaultValue === void 0) {
      defaultValue = [];
    }

    _this = _Builder.call(this, 'array', defaultValue) || this;

    _defineProperty(_assertThisInitialized(_this), "contents", null);

    if ("production" !== process.env.NODE_ENV) {
      if (contents) {
        if (contents instanceof Builder) {
          _this.contents = contents;

          _this.addCheck(_this.checkContents, contents);
        } else {
          _this.invariant(false, 'A blueprint is required for array contents.');
        }
      }
    }

    return _this;
  }

  var _proto = ArrayBuilder.prototype;

  _proto.checkContents = function checkContents(path, value, contents) {
    var _this2 = this;

    var nextValue = [].concat(value);

    if ("production" !== process.env.NODE_ENV) {
      value.forEach(function (item, i) {
        nextValue[i] = contents.runChecks(path + "[" + i + "]", item, _this2.currentStruct, _this2.options);
      });
    }

    return nextValue;
  };

  _proto.notEmpty = function notEmpty() {
    return this.addCheck(this.checkNotEmpty);
  };

  _proto.checkNotEmpty = function checkNotEmpty(path, value) {
    if ("production" !== process.env.NODE_ENV) {
      this.invariant(value.length > 0, 'Array cannot be empty.', path);
    }
  };

  _proto.typeAlias = function typeAlias() {
    var contents = this.contents;

    var alias = _Builder.prototype.typeAlias.call(this);

    return contents ? alias + "<" + contents.typeAlias() + ">" : alias;
  };

  return ArrayBuilder;
}(Builder);

export { ArrayBuilder as default };
export function array(contents, defaultValue) {
  if (contents === void 0) {
    contents = null;
  }

  return new ArrayBuilder(contents, defaultValue);
}