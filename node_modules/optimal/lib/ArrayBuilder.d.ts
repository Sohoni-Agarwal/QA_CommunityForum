import Builder from './Builder';
import { ArrayOf } from './types';
export default class ArrayBuilder<T> extends Builder<ArrayOf<T>> {
    contents: Builder<T> | null;
    constructor(contents?: Builder<T> | null, defaultValue?: ArrayOf<T>);
    checkContents(path: string, value: ArrayOf<T>, contents: Builder<T>): T[];
    notEmpty(): this;
    checkNotEmpty(path: string, value: ArrayOf<T>): void;
    /**
     * If contents are defined, return the type name using generics syntax.
     */
    typeAlias(): string;
}
export declare function array<T = unknown>(contents?: Builder<T> | null, defaultValue?: ArrayOf<T>): ArrayBuilder<T>;
