import Builder from './Builder';
export declare type Constructor<T> = (new (...args: any[]) => T) | (Function & {
    prototype: T;
});
export default class InstanceBuilder<T> extends Builder<T | null> {
    loose: boolean;
    refClass: Constructor<T> | null;
    constructor(refClass?: Constructor<T> | null, loose?: boolean);
    checkInstance(path: string, value: T, refClass: T | null): void;
    /**
     * If reference class is defined, return the class name if available.
     */
    typeAlias(): string;
}
export declare function instance<T = Function>(refClass?: Constructor<T> | null, loose?: boolean): InstanceBuilder<T>;
export declare function builder<T = any>(): InstanceBuilder<Builder<T>>;
export declare function regex(): InstanceBuilder<RegExp>;
export declare function date(): InstanceBuilder<Date>;
