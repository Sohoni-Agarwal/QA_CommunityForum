import Builder from './Builder';
import { ObjectOf } from './types';
export default class ObjectBuilder<T> extends Builder<ObjectOf<T>> {
    contents: Builder<T> | null;
    constructor(contents?: Builder<T> | null, defaultValue?: ObjectOf<T>);
    checkContents(path: string, value: ObjectOf<T>, contents: Builder<T>): ObjectOf<T>;
    notEmpty(): this;
    checkNotEmpty(path: string, value: ObjectOf<T>): void;
    /**
     * If contents are defined, return the type name using generics syntax.
     */
    typeAlias(): string;
}
export declare function object<T = unknown>(contents?: Builder<T> | null, defaultValue?: ObjectOf<T>): ObjectBuilder<T>;
export declare function blueprint<T = any>(defaultValue?: ObjectOf<Builder<T>>): ObjectBuilder<Builder<T>>;
