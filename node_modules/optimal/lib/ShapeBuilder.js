"use strict";

exports.__esModule = true;
exports.shape = shape;
exports.default = void 0;

var _Builder2 = _interopRequireDefault(require("./Builder"));

var _isObject = _interopRequireDefault(require("./isObject"));

var _optimal = _interopRequireDefault(require("./optimal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ShapeBuilder = function (_Builder) {
  _inheritsLoose(ShapeBuilder, _Builder);

  function ShapeBuilder(contents) {
    var _this;

    _this = _Builder.call(this, 'shape', {}) || this;

    _defineProperty(_assertThisInitialized(_this), "contents", void 0);

    _defineProperty(_assertThisInitialized(_this), "isExact", false);

    if ("production" !== process.env.NODE_ENV) {
      _this.invariant((0, _isObject.default)(contents) && Object.keys(contents).length > 0 && Object.keys(contents).every(function (key) {
        return contents[key] instanceof _Builder2.default;
      }), 'A non-empty object of properties to blueprints are required for a shape.');
    }

    _this.contents = contents;
    return _this;
  }

  var _proto = ShapeBuilder.prototype;

  _proto.exact = function exact() {
    this.isExact = true;
    return this;
  };

  _proto.runChecks = function runChecks(path, initialValue, struct, options) {
    if (options === void 0) {
      options = {};
    }

    var object = initialValue || this.defaultValue || {};

    if ("production" !== process.env.NODE_ENV) {
      this.invariant((0, _isObject.default)(object), 'Value passed to shape must be an object.', path);
    }

    return (0, _optimal.default)(object, this.contents, _extends({}, options, {
      prefix: path,
      unknown: !this.isExact
    }));
  };

  return ShapeBuilder;
}(_Builder2.default);

exports.default = ShapeBuilder;

function shape(contents) {
  return new ShapeBuilder(contents);
}