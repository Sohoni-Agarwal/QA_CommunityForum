"use strict";

exports.__esModule = true;
exports.object = object;
exports.blueprint = blueprint;
exports.default = void 0;

var _Builder2 = _interopRequireDefault(require("./Builder"));

var _InstanceBuilder = require("./InstanceBuilder");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ObjectBuilder = function (_Builder) {
  _inheritsLoose(ObjectBuilder, _Builder);

  function ObjectBuilder(contents, defaultValue) {
    var _this;

    if (contents === void 0) {
      contents = null;
    }

    if (defaultValue === void 0) {
      defaultValue = {};
    }

    _this = _Builder.call(this, 'object', defaultValue) || this;

    _defineProperty(_assertThisInitialized(_this), "contents", null);

    if ("production" !== process.env.NODE_ENV) {
      if (contents) {
        if (contents instanceof _Builder2.default) {
          _this.contents = contents;

          _this.addCheck(_this.checkContents, contents);
        } else {
          _this.invariant(false, 'A blueprint is required for object contents.');
        }
      }
    }

    return _this;
  }

  var _proto = ObjectBuilder.prototype;

  _proto.checkContents = function checkContents(path, value, contents) {
    var _this2 = this;

    var nextValue = _extends({}, value);

    if ("production" !== process.env.NODE_ENV) {
      Object.keys(value).forEach(function (key) {
        nextValue[key] = contents.runChecks(path + "." + key, value[key], _this2.currentStruct, _this2.options);
      });
    }

    return nextValue;
  };

  _proto.notEmpty = function notEmpty() {
    return this.addCheck(this.checkNotEmpty);
  };

  _proto.checkNotEmpty = function checkNotEmpty(path, value) {
    if ("production" !== process.env.NODE_ENV) {
      this.invariant(Object.keys(value).length > 0, 'Object cannot be empty.', path);
    }
  };

  _proto.typeAlias = function typeAlias() {
    var contents = this.contents;

    var alias = _Builder.prototype.typeAlias.call(this);

    return contents ? alias + "<" + contents.typeAlias() + ">" : alias;
  };

  return ObjectBuilder;
}(_Builder2.default);

exports.default = ObjectBuilder;

function object(contents, defaultValue) {
  if (contents === void 0) {
    contents = null;
  }

  return new ObjectBuilder(contents, defaultValue);
}

function blueprint(defaultValue) {
  return new ObjectBuilder((0, _InstanceBuilder.builder)().notNullable(), defaultValue);
}