"use strict";

exports.__esModule = true;
exports.string = string;
exports.default = void 0;

var _Builder2 = _interopRequireDefault(require("./Builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function isString(value) {
  return typeof value === 'string' && value !== '';
}

var StringBuilder = function (_Builder) {
  _inheritsLoose(StringBuilder, _Builder);

  function StringBuilder(defaultValue) {
    return _Builder.call(this, 'string', defaultValue || '') || this;
  }

  var _proto = StringBuilder.prototype;

  _proto.contains = function contains(token, index) {
    if (index === void 0) {
      index = 0;
    }

    if ("production" !== process.env.NODE_ENV) {
      this.invariant(isString(token), 'Contains requires a non-empty token.');
    }

    return this.addCheck(this.checkContains, token, index);
  };

  _proto.checkContains = function checkContains(path, value, token, index) {
    if (index === void 0) {
      index = 0;
    }

    if ("production" !== process.env.NODE_ENV) {
      if (this.isOptionalDefault(value)) {
        return;
      }

      this.invariant(value.includes(token, index), "String does not include \"" + token + "\".", path);
    }
  };

  _proto.match = function match(pattern) {
    if ("production" !== process.env.NODE_ENV) {
      this.invariant(pattern instanceof RegExp, 'Match requires a regular expression to match against.');
    }

    return this.addCheck(this.checkMatch, pattern);
  };

  _proto.checkMatch = function checkMatch(path, value, pattern) {
    if ("production" !== process.env.NODE_ENV) {
      if (this.isOptionalDefault(value)) {
        return;
      }

      this.invariant(!!value.match(pattern), "String does not match pattern \"" + pattern.source + "\".", path);
    }
  };

  _proto.notEmpty = function notEmpty() {
    return this.addCheck(this.checkNotEmpty);
  };

  _proto.checkNotEmpty = function checkNotEmpty(path, value) {
    if ("production" !== process.env.NODE_ENV) {
      this.invariant(isString(value), 'String cannot be empty.', path);
    }
  };

  _proto.oneOf = function oneOf(list) {
    if ("production" !== process.env.NODE_ENV) {
      this.invariant(Array.isArray(list) && list.length > 0 && list.every(function (item) {
        return isString(item);
      }), 'One of requires a non-empty array of strings.');
    }

    this.addCheck(this.checkOneOf, list);
    return this;
  };

  _proto.checkOneOf = function checkOneOf(path, value, list) {
    if ("production" !== process.env.NODE_ENV) {
      this.invariant(list.includes(value), "String must be one of: " + list.join(', '), path);
    }
  };

  return StringBuilder;
}(_Builder2.default);

exports.default = StringBuilder;

function string(defaultValue) {
  return new StringBuilder(defaultValue);
}