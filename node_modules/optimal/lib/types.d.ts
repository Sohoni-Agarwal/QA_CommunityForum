import Builder from './Builder';
export declare type ArrayOf<T> = T[];
export declare type FuncOf = (...args: unknown[]) => unknown;
export interface ObjectOf<T> {
    [key: string]: T;
}
export declare type Blueprint<Struct extends object> = {
    [K in keyof Struct]-?: Builder<Struct[K]>;
};
export declare type CheckerCallback = (path: string, value: any, ...args: any[]) => void;
export declare type CustomCallback<T> = (value: T, struct: object) => void;
export interface OptimalOptions {
    file?: string;
    name?: string;
    prefix?: string;
    unknown?: boolean;
}
export declare type SupportedType = 'array' | 'boolean' | 'custom' | 'function' | 'instance' | 'number' | 'object' | 'shape' | 'string' | 'union' | 'unknown';
