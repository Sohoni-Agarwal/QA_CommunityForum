"use strict";

exports.__esModule = true;
exports.instance = instance;
exports.builder = builder;
exports.regex = regex;
exports.date = date;
exports.default = void 0;

var _Builder2 = _interopRequireDefault(require("./Builder"));

var _isObject = _interopRequireDefault(require("./isObject"));

var _instanceOf = _interopRequireDefault(require("./instanceOf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InstanceBuilder = function (_Builder) {
  _inheritsLoose(InstanceBuilder, _Builder);

  function InstanceBuilder(refClass, loose) {
    var _this;

    if (refClass === void 0) {
      refClass = null;
    }

    if (loose === void 0) {
      loose = false;
    }

    _this = _Builder.call(this, 'instance', null) || this;

    _defineProperty(_assertThisInitialized(_this), "loose", false);

    _defineProperty(_assertThisInitialized(_this), "refClass", null);

    _this.nullable();

    if ("production" !== process.env.NODE_ENV) {
      if (refClass) {
        _this.invariant(typeof refClass === 'function', 'A class reference is required.');
      }

      _this.loose = loose;
      _this.refClass = refClass;

      _this.addCheck(_this.checkInstance, refClass);
    }

    return _this;
  }

  var _proto = InstanceBuilder.prototype;

  _proto.checkInstance = function checkInstance(path, value, refClass) {
    if ("production" !== process.env.NODE_ENV) {
      if (refClass) {
        this.invariant(typeof refClass === 'function' && (value instanceof refClass || this.loose && (0, _isObject.default)(value) && (0, _instanceOf.default)(value, refClass)), "Must be an instance of \"" + this.typeAlias() + "\".", path);
      } else {
        this.invariant((0, _isObject.default)(value) && value.constructor !== Object, 'Must be a class instance.', path);
      }
    }
  };

  _proto.typeAlias = function typeAlias() {
    var refClass = this.refClass;
    return refClass ? refClass.name || refClass.constructor.name : 'class';
  };

  return InstanceBuilder;
}(_Builder2.default);

exports.default = InstanceBuilder;

function instance(refClass, loose) {
  if (refClass === void 0) {
    refClass = null;
  }

  return new InstanceBuilder(refClass, loose);
}

function builder() {
  return instance(_Builder2.default);
}

function regex() {
  return instance(RegExp);
}

function date() {
  return instance(Date);
}